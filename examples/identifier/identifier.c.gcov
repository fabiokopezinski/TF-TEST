        -:    0:Source:src/identifier.c
        -:    0:Graph:identifier.gcno
        -:    0:Data:identifier.gcda
        -:    0:Runs:1
        -:    1:// ----------------------------------------------------------------
        -:    2:// ESPECIFICAÇÃO: O programa deve determinar se um identificador
        -:    3:// é ou não válido. Um identificador válido deve começar com uma
        -:    4:// letra e conter apenas letras ou dígitos. Além disto, deve ter
        -:    5:// no mínimo 1 caractere e no máximo 6 caracteres de comprimento
        -:    6:// ----------------------------------------------------------------
        -:    7:
        -:    8:#include <stdio.h>
        -:    9:#include "identifier.h"
        -:   10:
function valid_s called 6 returned 100% blocks executed 100%
        6:   11:int valid_s(char ch) {
        6:   12:  if (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z')))
branch  0 taken 3 (fallthrough)
branch  1 taken 3
branch  2 taken 2 (fallthrough)
branch  3 taken 1
branch  4 taken 2 (fallthrough)
branch  5 taken 3
branch  6 taken 2 (fallthrough)
branch  7 taken 0
        3:   13:    return 1;
        -:   14:  else
        3:   15:    return 0;
        -:   16:}
        -:   17:
function valid_f called 15 returned 100% blocks executed 100%
       15:   18:int valid_f(char ch) {
       15:   19:  if (((ch >= 'A') && (ch <= 'Z')) || ((ch >= 'a') && (ch <= 'z')) || ((ch >= '0') && (ch <= '9')))
branch  0 taken 9 (fallthrough)
branch  1 taken 6
branch  2 taken 9 (fallthrough)
branch  3 taken 0
branch  4 taken 9 (fallthrough)
branch  5 taken 6
branch  6 taken 0 (fallthrough)
branch  7 taken 9
branch  8 taken 2 (fallthrough)
branch  9 taken 4
branch 10 taken 2 (fallthrough)
branch 11 taken 0
       11:   20:    return 1;
        -:   21:  else
        4:   22:    return 0;
        -:   23:}
        -:   24:
function identifier called 6 returned 100% blocks executed 100%
        6:   25:int identifier(char * letter){
        -:   26:  char achar;
        -:   27:  int  length, valid_id;
        6:   28:  length = 0;
        6:   29:  valid_id = valid_s(letter[0]);
call    0 returned 6
        6:   30:  if(valid_id) {
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        3:   31:    length = 1;
        -:   32:  }
        6:   33:  achar = letter[1];
       21:   34:  while(achar != '\0') {
branch  0 taken 15
branch  1 taken 6 (fallthrough)
       15:   35:    if(!(valid_f(achar))) {
call    0 returned 15
branch  1 taken 4 (fallthrough)
branch  2 taken 11
        4:   36:      valid_id = 0;
        -:   37:    }
       15:   38:    length++;
       15:   39:    achar = letter[length];
        -:   40:  }
        6:   41:  if (valid_id && (length >= 1) && (length <= 6)) {
branch  0 taken 3 (fallthrough)
branch  1 taken 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        -:   42:    
        2:   43:    return 0;
        -:   44:  }
        -:   45:  else {
        -:   46:   
        4:   47:    return 1;
        -:   48:  }
        -:   49:
        -:   50:}
